const express = require('express');
const path = require('path');
const session = require('express-session');
const http = require('http');
const socketIo = require('socket.io');
const fs = require('fs');

// Bot bile≈üenlerini import et
const Database = require('../database/database');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// Veritabanƒ± baƒülantƒ±sƒ±
const database = new Database();

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// Session yapƒ±landƒ±rmasƒ±
app.use(session({
    secret: process.env.WEB_SESSION_SECRET || 'discord-mod-panel-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { 
        secure: false,
        maxAge: 24 * 60 * 60 * 1000 // 24 saat
    }
}));

// Auth middleware
const requireAuth = (req, res, next) => {
    if (req.session && req.session.authenticated) {
        next();
    } else {
        res.redirect('/login.html');
    }
};

// Ana sayfa - Dashboard
app.get('/', requireAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'dashboard.html'));
});

// Login sayfasƒ±
app.get('/login.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

// Login i≈ülemi
app.post('/api/login', async (req, res) => {
    const { username, password } = req.body;
    
    const adminUsername = process.env.ADMIN_USERNAME || 'admin';
    const adminPassword = process.env.ADMIN_PASSWORD || 'admin123';
    
    if (username === adminUsername && password === adminPassword) {
        req.session.authenticated = true;
        req.session.username = username;
        console.log(`üìä Admin Giri≈üi - Kullanƒ±cƒ±: ${username}`);
        res.json({ success: true });
    } else {
        console.log(`‚ùå Ba≈üarƒ±sƒ±z giri≈ü denemesi - Kullanƒ±cƒ±: ${username}`);
        res.json({ success: false, error: 'Kullanƒ±cƒ± adƒ± veya ≈üifre hatalƒ±!' });
    }
});

// Logout
app.post('/api/logout', (req, res) => {
    req.session.destroy();
    res.json({ success: true });
});

// Dashboard verileri API
app.get('/api/dashboard', requireAuth, async (req, res) => {
    try {
        const moderators = await database.getActiveModerators();
        const today = new Date().toISOString().split('T')[0];
        const todayAssignments = await database.getDailyAssignments(today);
        const todayExcuses = await database.getDailyExcuses(today);
        
        const stats = {
            totalModerators: moderators.length,
            todayAssignments: todayAssignments.length,
            todayExcuses: todayExcuses.length,
            emptySlots: 5 - todayAssignments.length
        };

        res.json({
            success: true,
            data: {
                stats,
                moderators,
                todayAssignments,
                todayExcuses,
                today
            }
        });
    } catch (error) {
        console.error('Dashboard API hatasƒ±:', error);
        res.json({ success: false, error: 'Dashboard verileri y√ºklenemedi' });
    }
});

// Veritabanƒ± istatistikleri API
app.get('/api/database/stats', requireAuth, async (req, res) => {
    try {
        // Tablo sayƒ±larƒ±nƒ± ger√ßek veritabanƒ±ndan al
        const moderatorsCount = await database.get('SELECT COUNT(*) as count FROM moderators WHERE is_active = 1');
        const assignmentsCount = await database.get('SELECT COUNT(*) as count FROM daily_assignments');
        const excusesCount = await database.get('SELECT COUNT(*) as count FROM daily_excuses');
        const surveysCount = await database.get('SELECT COUNT(*) as count FROM survey_responses');
        const permanentShiftsCount = await database.get('SELECT COUNT(*) as count FROM permanent_shifts');
        
        // Veritabanƒ± boyutunu hesapla (SQLite dosyasƒ±)
        const fs = require('fs');
        const path = require('path');
        let dbSize = '0 MB';
        try {
            const dbPath = path.join(__dirname, '../../data/moderator_schedule.db');
            const stats = fs.statSync(dbPath);
            const fileSizeInBytes = stats.size;
            const fileSizeInMB = (fileSizeInBytes / (1024 * 1024)).toFixed(2);
            dbSize = `${fileSizeInMB} MB`;
        } catch (error) {
            console.log('Veritabanƒ± dosya boyutu hesaplanamadƒ±:', error.message);
        }
        
        // Son yedek tarihi (≈üimdilik sim√ºle)
        const lastBackup = 'Hi√ß';
        
        res.json({
            success: true,
            data: {
                moderators: moderatorsCount?.count || 0,
                assignments: assignmentsCount?.count || 0,
                excuses: excusesCount?.count || 0,
                surveys: surveysCount?.count || 0,
                permanentShifts: permanentShiftsCount?.count || 0,
                dbSize,
                lastBackup,
                status: 'online'
            }
        });
    } catch (error) {
        console.error('Veritabanƒ± istatistikleri hatasƒ±:', error);
        res.json({ success: false, error: 'Veritabanƒ± istatistikleri y√ºklenemedi' });
    }
});

// Haftalƒ±k aktivite verisi API
app.get('/api/dashboard/weekly', requireAuth, async (req, res) => {
    try {
        // Son 7 g√ºn√ºn verilerini al
        const weeklyData = [];
        const today = new Date();
        
        for (let i = 6; i >= 0; i--) {
            const date = new Date(today);
            date.setDate(date.getDate() - i);
            const dateStr = date.toISOString().split('T')[0];
            
            const assignments = await database.getDailyAssignments(dateStr);
            const excuses = await database.getDailyExcuses(dateStr);
            
            weeklyData.push({
                date: dateStr,
                day: date.toLocaleDateString('tr-TR', { weekday: 'long' }),
                assignments: assignments.length,
                excuses: excuses.length
            });
        }
        
        res.json({
            success: true,
            data: weeklyData
        });
    } catch (error) {
        console.error('Haftalƒ±k veri hatasƒ±:', error);
        res.json({ success: false, error: 'Haftalƒ±k veriler y√ºklenemedi' });
    }
});

// Takvim verileri API
app.get('/api/calendar', requireAuth, async (req, res) => {
    try {
        const selectedDate = req.query.date || new Date().toISOString().split('T')[0];
        const assignments = await database.getDailyAssignments(selectedDate);
        const excuses = await database.getDailyExcuses(selectedDate);
        const moderators = await database.getActiveModerators();

        res.json({
            success: true,
            data: {
                selectedDate,
                assignments,
                excuses,
                moderators
            }
        });
    } catch (error) {
        console.error('Takvim API hatasƒ±:', error);
        res.json({ success: false, error: 'Takvim verileri y√ºklenemedi' });
    }
});

// Manuel atama API
app.post('/api/assignment/manual', requireAuth, async (req, res) => {
    try {
        const { date, userId, slotId } = req.body;
        
        await database.assignToSlot(date, userId, slotId, 'manual_web');
        
        // Socket.io ile ger√ßek zamanlƒ± g√ºncelleme
        io.emit('assignment_updated', { date, userId, slotId });
        
        res.json({ success: true, message: 'Atama ba≈üarƒ±lƒ±' });
    } catch (error) {
        console.error('Manuel atama hatasƒ±:', error);
        res.json({ success: false, error: error.message });
    }
});

// Atama silme API
app.delete('/api/assignment/:id', requireAuth, async (req, res) => {
    try {
        const { id } = req.params;
        
        // Atama silme i≈ülemi
        await database.run('DELETE FROM daily_assignments WHERE id = ?', [id]);
        
        io.emit('assignment_deleted', { id });
        
        res.json({ success: true, message: 'Atama silindi' });
    } catch (error) {
        console.error('Atama silme hatasƒ±:', error);
        res.json({ success: false, error: error.message });
    }
});

// Takvim olu≈üturma API
app.post('/api/schedule/create', requireAuth, async (req, res) => {
    try {
        const { date } = req.body;
        
        // G√ºnl√ºk takvim olu≈üturma i≈ülemi
        const DailyModManager = require('../utils/dailyModManager');
        const dailyMod = new DailyModManager({ database, logger: console });
        
        const result = await dailyMod.sendDailyScheduleSurvey(date);
        
        if (result.success) {
            res.json({ success: true, message: `${date} i√ßin takvim olu≈üturuldu ve anket g√∂nderildi` });
        } else {
            res.json({ success: false, error: result.error || 'Takvim olu≈üturulamadƒ±' });
        }
    } catch (error) {
        console.error('Takvim olu≈üturma hatasƒ±:', error);
        res.json({ success: false, error: error.message });
    }
});

// Anket g√∂nderme API
app.post('/api/survey/send', requireAuth, async (req, res) => {
    try {
        const { date, type } = req.body;
        
        if (type === 'daily') {
            const DailyModManager = require('../utils/dailyModManager');
            const dailyMod = new DailyModManager({ database, logger: console });
            
            const result = await dailyMod.sendDailyScheduleSurvey(date);
            
            if (result.success) {
                res.json({ success: true, message: `${date} i√ßin g√ºnl√ºk anket g√∂nderildi` });
            } else {
                res.json({ success: false, error: result.error || 'Anket g√∂nderilemedi' });
            }
        } else {
            res.json({ success: false, error: 'Ge√ßersiz anket t√ºr√º' });
        }
    } catch (error) {
        console.error('Anket g√∂nderme hatasƒ±:', error);
        res.json({ success: false, error: error.message });
    }
});

// Moderat√∂r listesi API
app.get('/api/moderators', requireAuth, async (req, res) => {
    try {
        const moderators = await database.getActiveModerators();
        const permanentShifts = await database.getAllPermanentShifts();
        
        res.json({
            success: true,
            data: {
                moderators,
                permanentShifts
            }
        });
    } catch (error) {
        console.error('Moderat√∂r listesi hatasƒ±:', error);
        res.json({ success: false, error: 'Moderat√∂r listesi y√ºklenemedi' });
    }
});

// Socket.io baƒülantƒ±larƒ±
io.on('connection', (socket) => {
    console.log('Yeni web paneli baƒülantƒ±sƒ±:', socket.id);
    
    socket.on('disconnect', () => {
        console.log('Web paneli baƒülantƒ±sƒ± kesildi:', socket.id);
    });
});

// Sunucuyu ba≈ülat
const PORT = process.env.WEB_PORT || 6060;

async function startWebServer() {
    try {
        await database.connect();
        await database.init();
        
        server.listen(PORT, () => {
            console.log(`üåê Web Y√∂netim Paneli ba≈ülatƒ±ldƒ±: http://localhost:${PORT}`);
            console.log(`üìä Admin Giri≈üi - Kullanƒ±cƒ±: ${process.env.ADMIN_USERNAME || 'admin'}`);
        });
    } catch (error) {
        console.error('Web sunucu ba≈ülatma hatasƒ±:', error);
        process.exit(1);
    }
}

startWebServer();

module.exports = { app, io }; 