const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const SchedulePublisher = require('../utils/schedulePublisher');
const DisciplineManager = require('../utils/disciplineManager');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('admin')
        .setDescription('T√ºm admin komutlarƒ±')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .addSubcommand(subcommand =>
            subcommand
                .setName('takvim-olustur')
                .setDescription('G√ºnl√ºk takvim olu≈ütur')
                .addStringOption(option =>
                    option.setName('tarih')
                        .setDescription('Tarih (YYYY-MM-DD, bo≈ü bƒ±rakƒ±lƒ±rsa bug√ºn)')
                        .setRequired(false))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('kullanici-izin')
                .setDescription('Kullanƒ±cƒ±ya √∂zel izin/kƒ±sƒ±tlama olu≈ütur')
                .addUserOption(option =>
                    option.setName('kullanici')
                        .setDescription('ƒ∞zin verilecek/kƒ±sƒ±tlanacak kullanƒ±cƒ±')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('baslangic')
                        .setDescription('Ba≈ülangƒ±√ß saati (HH:MM)')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('bitis')
                        .setDescription('Biti≈ü saati (HH:MM)')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('tur')
                        .setDescription('ƒ∞zin t√ºr√º')
                        .setRequired(true)
                        .addChoices(
                            { name: '‚úÖ ƒ∞zin Ver (Bu saatlerde √ßalƒ±≈üabilir)', value: 'allow' },
                            { name: '‚ùå Kƒ±sƒ±tla (Bu saatlerde √ßalƒ±≈üamaz)', value: 'restrict' }
                        ))
                .addStringOption(option =>
                    option.setName('aciklama')
                        .setDescription('ƒ∞zin/kƒ±sƒ±tlama a√ßƒ±klamasƒ±')
                        .setRequired(false))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('kalici-saat')
                .setDescription('Kullanƒ±cƒ±ya kalƒ±cƒ± saat belirle (bot her zaman bu saate atar)')
                .addUserOption(option =>
                    option.setName('kullanici')
                        .setDescription('Kalƒ±cƒ± saat atanacak kullanƒ±cƒ±')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('vardiya')
                        .setDescription('Kalƒ±cƒ± vardiya se√ßimi')
                        .setRequired(true)
                        .addChoices(
                            { name: 'üåö Vardiya 1 - Gece Yarƒ±sƒ± (00:00-05:00)', value: 'slot1' },
                            { name: 'üåÖ Vardiya 2 - Sabah (05:00-10:00)', value: 'slot2' },
                            { name: '‚òÄÔ∏è Vardiya 3 - √ñƒülen (10:00-15:00)', value: 'slot3' },
                            { name: 'üå§Ô∏è Vardiya 4 - √ñƒüleden Sonra (15:00-20:00)', value: 'slot4' },
                            { name: 'üåÜ Vardiya 5 - Ak≈üam-Gece (20:00-00:00)', value: 'slot5' }
                        ))
                .addStringOption(option =>
                    option.setName('aciklama')
                        .setDescription('Kalƒ±cƒ± atama a√ßƒ±klamasƒ±')
                        .setRequired(false))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('saat-degistir')
                .setDescription('Kullanƒ±cƒ±nƒ±n saatini deƒüi≈ütir (deƒüi≈üen ki≈üiye mesaj g√∂nderir)')
                .addUserOption(option =>
                    option.setName('kullanici')
                        .setDescription('Saati deƒüi≈ütirilecek kullanƒ±cƒ±')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('yeni-vardiya')
                        .setDescription('Yeni vardiya se√ßimi')
                        .setRequired(true)
                        .addChoices(
                            { name: 'üåö Vardiya 1 - Gece Yarƒ±sƒ± (00:00-05:00)', value: 'slot1' },
                            { name: 'üåÖ Vardiya 2 - Sabah (05:00-10:00)', value: 'slot2' },
                            { name: '‚òÄÔ∏è Vardiya 3 - √ñƒülen (10:00-15:00)', value: 'slot3' },
                            { name: 'üå§Ô∏è Vardiya 4 - √ñƒüleden Sonra (15:00-20:00)', value: 'slot4' },
                            { name: 'üåÜ Vardiya 5 - Ak≈üam-Gece (20:00-00:00)', value: 'slot5' }
                        ))
                .addStringOption(option =>
                    option.setName('tarih')
                        .setDescription('Deƒüi≈üiklik tarihi (YYYY-MM-DD, bo≈ü bƒ±rakƒ±lƒ±rsa bug√ºn)')
                        .setRequired(false))
                .addStringOption(option =>
                    option.setName('sebep')
                        .setDescription('Deƒüi≈üiklik sebebi')
                        .setRequired(false))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('mod-ekle')
                .setDescription('Sisteme yeni moderat√∂r ekle')
                .addUserOption(option =>
                    option.setName('kullanici')
                        .setDescription('Eklenecek moderat√∂r')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('rol')
                        .setDescription('Moderat√∂r rol√º')
                        .setRequired(true)
                        .addChoices(
                            { name: 'üëÆ Moderat√∂r', value: 'MOD' },
                            { name: 'üëÆ‚Äç‚ôÇÔ∏è Senior Moderat√∂r', value: 'SR MOD' },
                            { name: 'üõ°Ô∏è Head Moderat√∂r', value: 'HEAD MOD' }
                        ))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('modlari-guncelle')
                .setDescription('T√ºm moderat√∂rleri tara ve g√ºncelle')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('takvim-gonder')
                .setDescription('Moderat√∂rlere takvim anketi g√∂nder')
                .addStringOption(option =>
                    option.setName('period')
                        .setDescription('D√∂nem (√∂rn: 2025-W32)')
                        .setRequired(false))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('takvim-sil')
                .setDescription('Belirtilen tarihin takvimini sil')
                .addStringOption(option =>
                    option.setName('tarih')
                        .setDescription('Silinecek tarih (YYYY-MM-DD)')
                        .setRequired(true))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('cezali-listesi')
                .setDescription('Cezalƒ± kullanƒ±cƒ±larƒ± listele')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('ban-kaldir')
                .setDescription('Kullanƒ±cƒ±nƒ±n banƒ±nƒ± kaldƒ±r')
                .addUserOption(option =>
                    option.setName('kullanici')
                        .setDescription('Banƒ± kaldƒ±rƒ±lacak kullanƒ±cƒ±')
                        .setRequired(true))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('stats')
                .setDescription('Bot istatistiklerini g√∂r√ºnt√ºle')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('permissions')
                .setDescription('Bot yetkilerini kontrol et')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('workload')
                .setDescription('Moderat√∂r √ßalƒ±≈üma y√ºk√º analizi (son 7 g√ºn)')
        ),

    async execute(interaction, client) {
        try {
            const subcommand = interaction.options.getSubcommand();
            const logger = client.logger;
            const database = client.database;
            const config = client.config;

            // Admin yetkisi kontrol√º
            if (!interaction.memberPermissions?.has(PermissionFlagsBits.Administrator)) {
                await interaction.reply({
                    content: '‚ùå Bu komutu kullanmak i√ßin y√∂netici yetkisine sahip olmanƒ±z gerekiyor.',
                    ephemeral: true
                });
                return;
            }

            await interaction.deferReply({ ephemeral: true });

            switch (subcommand) {
                case 'takvim-olustur':
                    await this.handleCreateSchedule(interaction, client);
                    break;
                case 'kullanici-izin':
                    await this.handleUserPermission(interaction, client);
                    break;
                case 'kalici-saat':
                    await this.handlePermanentShift(interaction, client);
                    break;
                case 'saat-degistir':
                    await this.handleChangeShift(interaction, client);
                    break;
                case 'mod-ekle':
                    await this.handleAddMod(interaction, client);
                    break;
                case 'modlari-guncelle':
                    await this.handleUpdateMods(interaction, client);
                    break;
                case 'takvim-gonder':
                    await this.handleSendSurvey(interaction, client);
                    break;
                case 'takvim-sil':
                    await this.handleDeleteSchedule(interaction, client);
                    break;
                case 'cezali-listesi':
                    await this.handlePunishedList(interaction, client);
                    break;
                case 'ban-kaldir':
                    await this.handleUnban(interaction, client);
                    break;
                case 'stats':
                    await this.handleStats(interaction, client);
                    break;
                case 'permissions':
                    await this.handlePermissions(interaction, client);
                    break;
                case 'workload':
                    await this.handleWorkload(interaction, client);
                    break;
                default:
                    await interaction.editReply({
                        content: '‚ùå Bilinmeyen alt komut.'
                    });
            }

        } catch (error) {
            client.logger.botError(error, 'Admin komut');
            
            try {
                await interaction.editReply({
                    content: '‚ùå Komut √ßalƒ±≈ütƒ±rƒ±lƒ±rken bir hata olu≈ütu.'
                });
            } catch (replyError) {
                client.logger.error('Hata mesajƒ± g√∂nderilemedi:', replyError.message);
            }
        }
    },

    // Takvim olu≈ütur
    async handleCreateSchedule(interaction, client) {
        const date = interaction.options.getString('tarih') || new Date().toISOString().split('T')[0];
        
        try {
            const AutoScheduleManager = require('../utils/autoScheduleManager');
            const autoScheduler = new AutoScheduleManager(client);
            
            await interaction.editReply({
                content: `üîÑ **${date}** i√ßin takvim olu≈üturuluyor...`
            });

            const result = await autoScheduler.createDailySchedule(date);
            
            if (result.success) {
                await interaction.editReply({
                    content: `‚úÖ **${date}** i√ßin takvim ba≈üarƒ±yla olu≈üturuldu!\n\n${result.summary}`
                });
            } else {
                await interaction.editReply({
                    content: `‚ùå Takvim olu≈üturulamadƒ±: ${result.error}`
                });
            }
        } catch (error) {
            await interaction.editReply({
                content: `‚ùå Takvim olu≈üturma hatasƒ±: ${error.message}`
            });
        }
    },

    // Kullanƒ±cƒ± izin/kƒ±sƒ±tlama
    async handleUserPermission(interaction, client) {
        const user = interaction.options.getUser('kullanici');
        const startTime = interaction.options.getString('baslangic');
        const endTime = interaction.options.getString('bitis');
        const type = interaction.options.getString('tur');
        const description = interaction.options.getString('aciklama') || '';

        try {
            // Saat formatƒ±nƒ± kontrol et
            const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
            if (!timeRegex.test(startTime) || !timeRegex.test(endTime)) {
                await interaction.editReply({
                    content: '‚ùå Ge√ßersiz saat formatƒ±! HH:MM formatƒ±nda giriniz (√∂rn: 14:30)'
                });
                return;
            }

            await client.database.setUserTimePermission(user.id, startTime, endTime, type, description);

            const typeText = type === 'allow' ? '‚úÖ ƒ∞zin verildi' : '‚ùå Kƒ±sƒ±tlandƒ±';
            const actionText = type === 'allow' ? '√ßalƒ±≈üabilir' : '√ßalƒ±≈üamaz';

            await interaction.editReply({
                content: `${typeText} **${user.username}** kullanƒ±cƒ±sƒ± **${startTime}-${endTime}** saatleri arasƒ±nda ${actionText}.\n${description ? `üìù A√ßƒ±klama: ${description}` : ''}`
            });

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå ƒ∞zin ayarlama hatasƒ±: ${error.message}`
            });
        }
    },

    // Kalƒ±cƒ± saat belirleme
    async handlePermanentShift(interaction, client) {
        const user = interaction.options.getUser('kullanici');
        const shift = interaction.options.getString('vardiya');
        const description = interaction.options.getString('aciklama') || '';

        try {
            await client.database.setPermanentShift(user.id, shift, description);

            const shiftNames = {
                'slot1': 'üåö Vardiya 1 - Gece Yarƒ±sƒ± (00:00-05:00)',
                'slot2': 'üåÖ Vardiya 2 - Sabah (05:00-10:00)',
                'slot3': '‚òÄÔ∏è Vardiya 3 - √ñƒülen (10:00-15:00)',
                'slot4': 'üå§Ô∏è Vardiya 4 - √ñƒüleden Sonra (15:00-20:00)',
                'slot5': 'üåÜ Vardiya 5 - Ak≈üam-Gece (20:00-00:00)'
            };

            await interaction.editReply({
                content: `‚úÖ **${user.username}** kullanƒ±cƒ±sƒ±na kalƒ±cƒ± vardiya atandƒ±:\n\n${shiftNames[shift]}\n${description ? `üìù A√ßƒ±klama: ${description}` : ''}\n\n‚ö†Ô∏è Bu kullanƒ±cƒ± artƒ±k otomatik olarak bu vardiyaya atanacak!`
            });

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå Kalƒ±cƒ± saat atama hatasƒ±: ${error.message}`
            });
        }
    },

    // Saat deƒüi≈ütirme
    async handleChangeShift(interaction, client) {
        const user = interaction.options.getUser('kullanici');
        const newShift = interaction.options.getString('yeni-vardiya');
        const date = interaction.options.getString('tarih') || new Date().toISOString().split('T')[0];
        const reason = interaction.options.getString('sebep') || 'Admin tarafƒ±ndan deƒüi≈ütirildi';

        try {
            const result = await client.database.changeUserShift(user.id, newShift, date, reason);
            
            if (result.success) {
                // Kullanƒ±cƒ±ya DM g√∂nder
                try {
                    const dmUser = await client.users.fetch(user.id);
                    const shiftNames = {
                        'slot1': 'üåö Vardiya 1 - Gece Yarƒ±sƒ± (00:00-05:00)',
                        'slot2': 'üåÖ Vardiya 2 - Sabah (05:00-10:00)',
                        'slot3': '‚òÄÔ∏è Vardiya 3 - √ñƒülen (10:00-15:00)',
                        'slot4': 'üå§Ô∏è Vardiya 4 - √ñƒüleden Sonra (15:00-20:00)',
                        'slot5': 'üåÜ Vardiya 5 - Ak≈üam-Gece (20:00-00:00)'
                    };

                    await dmUser.send({
                        embeds: [new EmbedBuilder()
                            .setColor('#ff9900')
                            .setTitle('üîÑ Vardiya Deƒüi≈üikliƒüi')
                            .setDescription(`**${date}** tarihli vardiyandƒ±z deƒüi≈ütirildi!`)
                            .addFields(
                                {
                                    name: 'üìÖ Tarih',
                                    value: date,
                                    inline: true
                                },
                                {
                                    name: 'üïí Yeni Vardiya',
                                    value: shiftNames[newShift],
                                    inline: false
                                },
                                {
                                    name: 'üìù Sebep',
                                    value: reason,
                                    inline: false
                                }
                            )
                            .setTimestamp()
                        ]
                    });
                } catch (dmError) {
                    client.logger.error(`${user.username} kullanƒ±cƒ±sƒ±na DM g√∂nderilemedi:`, dmError.message);
                }

                await interaction.editReply({
                    content: `‚úÖ **${user.username}** kullanƒ±cƒ±sƒ±nƒ±n **${date}** tarihli vardiyasƒ± deƒüi≈ütirildi!\nüì® Kullanƒ±cƒ±ya bildirim g√∂nderildi.`
                });
            } else {
                await interaction.editReply({
                    content: `‚ùå Vardiya deƒüi≈ütirme hatasƒ±: ${result.error}`
                });
            }

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå Saat deƒüi≈ütirme hatasƒ±: ${error.message}`
            });
        }
    },

    // Mod ekle
    async handleAddMod(interaction, client) {
        const user = interaction.options.getUser('kullanici');
        const role = interaction.options.getString('rol');

        try {
            await client.database.addModerator(user.id, user.username, user.displayName || user.username, [role]);

            await interaction.editReply({
                content: `‚úÖ **${user.username}** sisteme **${role}** rol√º ile eklendi!`
            });

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå Moderat√∂r ekleme hatasƒ±: ${error.message}`
            });
        }
    },

    // Modlarƒ± g√ºncelle
    async handleUpdateMods(interaction, client) {
        await interaction.editReply({
            content: 'üîÑ Moderat√∂rler taranƒ±yor ve g√ºncelleniyor...'
        });

        try {
            const guild = client.guilds.cache.get(client.config.discord.guildId);
            await guild.members.fetch();

            const moderators = [];
            
            for (const [userId, member] of guild.members.cache) {
                const userRoles = member.roles.cache.map(role => role.name);
                const modRoles = userRoles.filter(role => client.config.discord.modRoles.includes(role));
                
                if (modRoles.length > 0) {
                    moderators.push({
                        userId: member.user.id,
                        username: member.user.username,
                        displayName: member.displayName,
                        roles: modRoles
                    });
                    
                    await client.database.updateModerator(
                        member.user.id,
                        member.user.username,
                        member.displayName,
                        modRoles
                    );
                }
            }

            await interaction.editReply({
                content: `‚úÖ **${moderators.length}** moderat√∂r g√ºncellendi!`
            });

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå Moderat√∂r g√ºncelleme hatasƒ±: ${error.message}`
            });
        }
    },

    // Takvim g√∂nder (Anket)
    async handleSendSurvey(interaction, client) {
        const period = interaction.options.getString('period') || client.config.utils.getCurrentPeriod();
        
        await interaction.editReply({
            content: `üîÑ **${period}** d√∂nemi i√ßin anket g√∂nderiliyor...`
        });

        try {
            const SurveyManager = require('../utils/surveyManager');
            const surveyManager = new SurveyManager(client);
            
            const result = await surveyManager.sendSurveyToAllMods(period);
            
            await interaction.editReply({
                content: `‚úÖ **${period}** d√∂nemi anket g√∂nderimi tamamlandƒ±!\nüìä Ba≈üarƒ±lƒ±: **${result.sent}**, Ba≈üarƒ±sƒ±z: **${result.failed}**`
            });

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå Anket g√∂nderme hatasƒ±: ${error.message}`
            });
        }
    },

    // Takvim sil
    async handleDeleteSchedule(interaction, client) {
        const date = interaction.options.getString('tarih');

        try {
            await client.database.deleteScheduleForDate(date);
            
            await interaction.editReply({
                content: `‚úÖ **${date}** tarihinin takvimi silindi!`
            });

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå Takvim silme hatasƒ±: ${error.message}`
            });
        }
    },

    // Cezalƒ± listesi
    async handlePunishedList(interaction, client) {
        try {
            const punishedUsers = await client.database.getPunishedUsers();
            
            if (punishedUsers.length === 0) {
                await interaction.editReply({
                    content: '‚úÖ ≈ûu anda cezalƒ± kullanƒ±cƒ± bulunmuyor.'
                });
                return;
            }

            const embed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('üö´ Cezalƒ± Kullanƒ±cƒ±lar')
                .setDescription(`Toplam **${punishedUsers.length}** cezalƒ± kullanƒ±cƒ±`)
                .setTimestamp();

            const punishmentList = punishedUsers.map(user => {
                const endDate = new Date(user.ban_end).toLocaleString('tr-TR');
                return `**${user.username}** <@${user.user_id}>\nüìù Sebep: ${user.violation_type}\n‚è∞ Biti≈ü: ${endDate}`;
            });

            embed.addFields({
                name: 'Cezalƒ± Kullanƒ±cƒ±lar',
                value: punishmentList.join('\n\n'),
                inline: false
            });

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå Cezalƒ± listesi hatasƒ±: ${error.message}`
            });
        }
    },

    // Ban kaldƒ±r
    async handleUnban(interaction, client) {
        const user = interaction.options.getUser('kullanici');

        try {
            const result = await client.database.removeBan(user.id);
            
            if (result.success) {
                // Kullanƒ±cƒ±ya DM g√∂nder
                try {
                    const dmUser = await client.users.fetch(user.id);
                    await dmUser.send({
                        embeds: [new EmbedBuilder()
                            .setColor('#00ff00')
                            .setTitle('‚úÖ Ban Kaldƒ±rƒ±ldƒ±')
                            .setDescription('Cezanƒ±z admin tarafƒ±ndan kaldƒ±rƒ±ldƒ±! Artƒ±k normal ≈üekilde moderat√∂rl√ºk g√∂revlerinizi yapabilirsiniz.')
                            .setTimestamp()
                        ]
                    });
                } catch (dmError) {
                    client.logger.error(`${user.username} kullanƒ±cƒ±sƒ±na DM g√∂nderilemedi:`, dmError.message);
                }

                await interaction.editReply({
                    content: `‚úÖ **${user.username}** kullanƒ±cƒ±sƒ±nƒ±n banƒ± kaldƒ±rƒ±ldƒ±!\nüì® Kullanƒ±cƒ±ya bildirim g√∂nderildi.`
                });
            } else {
                await interaction.editReply({
                    content: `‚ùå Ban kaldƒ±rma hatasƒ±: ${result.error}`
                });
            }

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå Ban kaldƒ±rma hatasƒ±: ${error.message}`
            });
        }
    },

    // Bot istatistikleri
    async handleStats(interaction, client) {
        const embed = new EmbedBuilder()
            .setColor('#0099ff')
            .setTitle('üìä Bot ƒ∞statistikleri')
            .setThumbnail(client.user.displayAvatarURL())
            .setTimestamp();

        try {
            const activeMods = await client.database.getActiveModerators();
            const punishedUsers = await client.database.getPunishedUsers();
            const uptime = process.uptime();
            const uptimeText = `${Math.floor(uptime / 86400)}g ${Math.floor((uptime % 86400) / 3600)}s ${Math.floor((uptime % 3600) / 60)}dk`;
            
            embed.addFields(
                {
                    name: 'ü§ñ Bot Bilgileri',
                    value: [
                        `**√áalƒ±≈üma S√ºresi:** ${uptimeText}`,
                        `**Discord.js:** ${require('discord.js').version}`,
                        `**Node.js:** ${process.version}`,
                        `**Bellek:** ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB`
                    ].join('\n'),
                    inline: false
                },
                {
                    name: 'üë• Moderat√∂r ƒ∞statistikleri',
                    value: [
                        `**Aktif Moderat√∂r:** ${activeMods.length}`,
                        `**Cezalƒ± Kullanƒ±cƒ±:** ${punishedUsers.length}`,
                        `**Sistem Durumu:** ‚úÖ Aktif`
                    ].join('\n'),
                    inline: false
                }
            );

        } catch (error) {
            embed.addFields({
                name: '‚ùå Hata',
                value: 'ƒ∞statistikler alƒ±nƒ±rken bir hata olu≈ütu.',
                inline: false
            });
        }

        await interaction.editReply({ embeds: [embed] });
    },

    // Yetki kontrol√º
    async handlePermissions(interaction, client) {
        try {
            const PermissionChecker = require('../utils/permissionChecker');
            const permissionChecker = new PermissionChecker(client);
            
            await interaction.editReply({
                content: 'üîÑ Bot yetkileri kontrol ediliyor...'
            });

            const permissionCheck = await permissionChecker.checkBotPermissions();
            const embed = permissionChecker.createPermissionReport(permissionCheck);

            await interaction.editReply({
                content: permissionCheck.success ? 
                    '‚úÖ Yetki kontrol√º tamamlandƒ±!' : 
                    '‚ö†Ô∏è Yetki sorunlarƒ± tespit edildi!',
                embeds: [embed]
            });

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå Yetki kontrol√º hatasƒ±: ${error.message}`
            });
        }
    },

    // √áalƒ±≈üma y√ºk√º analizi
    async handleWorkload(interaction, client) {
        try {
            await interaction.editReply({
                content: 'üìä Moderat√∂r √ßalƒ±≈üma y√ºk√º analiz ediliyor...'
            });

            const moderators = await client.database.getActiveModerators();
            const today = new Date().toISOString().split('T')[0];
            
            // Son 7 g√ºn√º hesapla
            const last7Days = [];
            for (let i = 0; i < 7; i++) {
                const date = new Date();
                date.setDate(date.getDate() - i);
                last7Days.push(date.toISOString().split('T')[0]);
            }

            const workloadData = [];
            
            for (const mod of moderators) {
                let totalHours = 0;
                let totalDays = 0;
                
                for (const date of last7Days) {
                    const assignments = await client.database.getUserAssignmentsForDate(mod.user_id, date);
                    if (assignments.length > 0) {
                        totalDays++;
                        for (const assignment of assignments) {
                            const hours = this.getSlotHours(assignment.slot_id);
                            totalHours += hours;
                        }
                    }
                }

                workloadData.push({
                    username: mod.username,
                    userId: mod.user_id,
                    totalHours,
                    totalDays,
                    avgHoursPerDay: totalDays > 0 ? (totalHours / totalDays).toFixed(1) : 0
                });
            }

            // √áalƒ±≈üma y√ºk√ºne g√∂re sƒ±rala
            workloadData.sort((a, b) => b.totalHours - a.totalHours);

            const embed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('üìä Moderat√∂r √áalƒ±≈üma Y√ºk√º Analizi')
                .setDescription(`Son 7 g√ºnl√ºk √ßalƒ±≈üma saatleri analizi`)
                .setTimestamp();

            // En √ßok √ßalƒ±≈üanlar
            const topWorkers = workloadData.slice(0, 3);
            if (topWorkers.length > 0) {
                embed.addFields({
                    name: 'üèÜ En √áok √áalƒ±≈üanlar',
                    value: topWorkers.map((mod, index) => 
                        `**${index + 1}.** ${mod.username}\n` +
                        `üìä ${mod.totalHours} saat (${mod.totalDays} g√ºn)\n` +
                        `üìà G√ºnl√ºk ort: ${mod.avgHoursPerDay} saat`
                    ).join('\n\n'),
                    inline: false
                });
            }

            // En az √ßalƒ±≈üanlar
            const leastWorkers = workloadData.slice(-3).reverse();
            if (leastWorkers.length > 0) {
                embed.addFields({
                    name: 'üí§ En Az √áalƒ±≈üanlar',
                    value: leastWorkers.map((mod, index) => 
                        `**${index + 1}.** ${mod.username}\n` +
                        `üìä ${mod.totalHours} saat (${mod.totalDays} g√ºn)\n` +
                        `üìà G√ºnl√ºk ort: ${mod.avgHoursPerDay} saat`
                    ).join('\n\n'),
                    inline: false
                });
            }

            // Genel istatistikler
            const totalWorkHours = workloadData.reduce((sum, mod) => sum + mod.totalHours, 0);
            const avgWorkHours = workloadData.length > 0 ? (totalWorkHours / workloadData.length).toFixed(1) : 0;
            
            embed.addFields({
                name: 'üìà Genel ƒ∞statistikler',
                value: [
                    `**Toplam √áalƒ±≈üma:** ${totalWorkHours} saat`,
                    `**Ortalama/Moderat√∂r:** ${avgWorkHours} saat`,
                    `**Aktif Moderat√∂r:** ${workloadData.filter(m => m.totalHours > 0).length}`,
                    `**ƒ∞deal Daƒüƒ±lƒ±m:** ${(totalWorkHours / moderators.length).toFixed(1)} saat/mod`
                ].join('\n'),
                inline: false
            });

            await interaction.editReply({
                content: '‚úÖ √áalƒ±≈üma y√ºk√º analizi tamamlandƒ±!',
                embeds: [embed]
            });

        } catch (error) {
            await interaction.editReply({
                content: `‚ùå √áalƒ±≈üma y√ºk√º analizi hatasƒ±: ${error.message}`
            });
        }
    },

    // Slot saat s√ºresini hesapla
    getSlotHours(slotId) {
        const slotHours = {
            'slot1': 5, // 00:00-05:00
            'slot2': 5, // 05:00-10:00
            'slot3': 5, // 10:00-15:00
            'slot4': 5, // 15:00-20:00
            'slot5': 4  // 20:00-24:00
        };
        return slotHours[slotId] || 5;
    }
}; 